7#!/usr/bin/env python

import sys
import json
import time
from warnings import warn
import getpass

from web3 import Web3, HTTPProvider, utils
from web3.utils.encoding import to_hex


def main(abi_file, bin_file, keystore, owner1, owner2, owner3, lock_height):

    abi = json.load(open(abi_file))
    bin_input = open(bin_file, "r") # opening for [r]eading as [b]inary
    binary = bin_input.read(1024*1024) # if you only wanted to read 512 bytes, do .read(512)
    bin_input.close()

    m1 = Web3.toChecksumAddress(owner1)
    m2 = Web3.toChecksumAddress(owner2)
    m3 = Web3.toChecksumAddress(owner3)
    h = int(lock_height)
    
    from my_eth_util import create_node
    
    w3 = create_node(2)
    gas_price = w3.eth.generateGasPrice()
    w3_keys =  create_node(0)

    with open(keystore) as keyfile:
        encrypted_key = keyfile.read()
        pswd = getpass.getpass('Enter keystore password:')
        private_key = w3_keys.eth.account.decrypt(encrypted_key, pswd)

    #determine keys balances
    accounts = w3_keys.eth.accounts
    counter=0
    for a in accounts:
        balance = w3.eth.getBalance(a)
        print("Account {} >> balance {}".format(a, balance))
        if balance > 0 and not w3_keys.eth.defaultAccount:
            print("\tSet default account to {}".format(a))
            w3_keys.eth.defaultAccount = w3_keys.eth.accounts[counter]
        counter+=1

    contract = w3.eth.contract(abi=abi,
                               bytecode=binary)
    
    nonce = w3.eth.getTransactionCount(w3_keys.eth.defaultAccount)
    print("Got nonce {} for default account".format(nonce))

    contract_tx = {'from': w3_keys.eth.defaultAccount, 'gas': 2300000, 'gasPrice': int(gas_price), 'nonce': nonce}
    
    print("Authorize Transaction Creating Contract, probably in a browser window")
    #tx_hash = contract.constructor(m1,m2,m3).transact()
    tx = contract.constructor(m1,m2,m3,h).buildTransaction(contract_tx)
    tx_signed = w3_keys.eth.account.signTransaction(tx, private_key=private_key)
    #print("Signed tx \n {} \n".format(tx_signed))
    tx_hash = w3.eth.sendRawTransaction(tx_signed['rawTransaction'])
    print("Deploy Tx Hash >> {}".format(to_hex(tx_hash)))
    #old test transaction
    #tx_receipt = w3.eth.getTransactionReceipt("0x9bae900a05d76eca70c2fc7b9d17c5dde2121184505eaaae1ac2c0a79e905660")
    #time.sleep(10)
    tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)
    if tx_receipt:
        #print("Got receipt {}".format(tx_receipt))
        contract_address = tx_receipt['contractAddress']
        print("Contract address {}".format(contract_address))
        print("Was transaction successful? \n")
        print(tx_receipt['status'])
    else:
        print("Deployment failed")
    print("Rec {}".format(tx_receipt))
    

if __name__ == '__main__':
    if (len(sys.argv) < 8):
        sys.exit("USAGE: create_timelocked_ethereum_multisig CONTRACT_ABI CONTRACT_BIN DEPLOY_KEYSTORE OWNER_ADDRESS_1 OWNER_ADDRESS_2 OWNER_ADDRESS_3 LOCK_BLOCKHEIGHT")
    main(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4] , sys.argv[5], sys.argv[6], sys.argv[7])
