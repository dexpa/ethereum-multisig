#!/usr/bin/env python

import sys
import os
import getpass
import json
from warnings import warn

from eth_utils import from_wei, to_wei
from web3.utils.encoding import to_hex

def main(keystore_path, amount, destination_address):
    
    if not os.access(keystore_path, os.R_OK):
        print("Error while checking keystore file {}. Stopping".format(keystore_path))
        sys.exit(1)
        
    from my_eth_util import create_node
    
    w3 = create_node(2)
    chain_id = w3.net.chainId
    gas_price = w3.eth.generateGasPrice()
    if gas_price:
        print("Current gas price is: {}".format(gas_price))
    else:
        print("Error while recieving gas price. Stopping")
        sys.exit(1)
    
    nonce = 0
    with open(keystore_path) as keyfile:
        encrypted_key = keyfile.read()
        pswd = getpass.getpass('Enter keystore password:')
        private_key = w3.eth.account.decrypt(encrypted_key, pswd)
        account = w3.eth.account.privateKeyToAccount(private_key)
        balance = w3.eth.getBalance(account.address)
        nonce = w3.eth.getTransactionCount(account.address)
        print("Account {} >> balance {} >> nonce {}".format(account, from_wei(balance, 'ether'), nonce))

        min_eth = 0.001

        if balance < min_eth:
            print("\tBalance is less than minimum {}. Get more coins. Stopping".format(min_eth))
        else:
            w3.eth.defaultAccount = account
    
    print("Depositing to {}".format(destination_address))
    wei_amt = to_wei(amount, 'ether')
    transaction = { 'to': destination_address,
                    'value': wei_amt,
                    'gas': 2000000,
                    'gasPrice': int(gas_price),
                    'nonce': nonce,
                    'chainId': chain_id }

    try:
        signed = w3.eth.account.signTransaction(transaction, private_key)
    except ValueError:
        print("Exception. Probably wrong nonce (duplicated transaction). Try again later")
        sys.exit(1)
    except TypeError:
        print("Exception. Probably wrong addres. Check it carefully or try again with different destination address")
        sys.exit(1)        
        
    print("\tRaw transaction {}".format(to_hex(signed.rawTransaction)))
    print("\tHash {}".format(to_hex(signed.hash)))
    print("\tr {}".format(signed.r))
    print("\ts {}".format(signed.s))
    print("\tv {}".format(signed.v))

    print("Broadcasting tx...")
    tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)
    try:
        #time.sleep(10)
        #tx_receipt = w3.eth.getTransactionReceipt(tx_hash)
        tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)
    except Exception as e:
        print("Exception. Probably timeout error")
        sys.exit(1)        
        
    if tx_receipt:
        print("Got receipt. Gas used {}".format(tx_receipt['cumulativeGasUsed']))
        print("Was transaction successful? -- {}".format(tx_receipt['status']))
    else:
        print("Sending failed")
        sys.exit(1)
        
if __name__ == '__main__':
    if (len(sys.argv) < 4):
        sys.exit("USAGE: deposit_ethereum_multisig KEY_FILE AMOUNT(ETH) CONTRACT_ADDRESS")
    main(sys.argv[1], sys.argv[2], sys.argv[3])
