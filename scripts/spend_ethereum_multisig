#!/usr/bin/env python
import os
import sys
import json
import getpass
from warnings import warn
from eth_utils import to_bytes, from_wei, to_wei
from web3 import Web3
from web3.utils.encoding import to_hex

def parse_signature(signature):
    R = "0x" + signature[:64]
    S = "0x" + signature[64:128]
    V_tmp = signature[128:]
    if (V_tmp == "1b"):
        V = 0
    elif (V_tmp == "1c"):
        V = 1
    else:
        V = "crap"
    return [V, R, S]


def main(keystore_path, contract_address, destination_address, amount, sig_1, sig_2):

    if not os.access(keystore_path, os.R_OK):
        print("Error while checking keystore file {}. Stopping".format(keystore_path))
        sys.exit(1)

    from my_eth_util import create_node
    w3 = create_node(2)
    chain_id = w3.net.chainId
    gas_price = w3.eth.generateGasPrice()
    if gas_price:
        print("Current gas price is: {}".format(gas_price))
    else:
        print("Error while recieving gas price. Stopping")
        sys.exit(1)
        
    nonce = 0
    with open(keystore_path) as keyfile:
        encrypted_key = keyfile.read()
        pswd = getpass.getpass('Enter keystore password:')
        private_key = w3.eth.account.decrypt(encrypted_key, pswd)
        account = w3.eth.account.privateKeyToAccount(private_key)
        w3.eth.defaultAccount = account
        nonce = w3.eth.getTransactionCount(account.address)
        
    with open('../build/MultiSig2of3.abi') as abi_file:
        abi = json.load(abi_file)

    c_address = Web3.toChecksumAddress(contract_address)
    dest = Web3.toChecksumAddress(destination_address)
            
    contract = w3.eth.contract(address = contract_address, abi=abi)

    # slice up sigs
    parsed_sig_1 = parse_signature(sig_1)
    print(parsed_sig_1)
    parsed_sig_2 = parse_signature(sig_2)
    print(parsed_sig_2)
    wei = to_wei(amount, 'ether')

    print("Approaching to call contract function >> ")
    
    transaction = {
        'from': w3.eth.defaultAccount.address,
        'value': 0,
        'gas': 1100000,
        'gasPrice': int(gas_price),
        'nonce': nonce,
        'chainId': chain_id
    }

    contract_tx = contract.functions.spend(dest,
                                           wei,
                                           parsed_sig_1[0],
                                           to_bytes(hexstr=parsed_sig_1[1]),
                                           to_bytes(hexstr=parsed_sig_1[2]),
                                           parsed_sig_2[0],
                                           to_bytes(hexstr=parsed_sig_2[1]),
                                           to_bytes(hexstr=parsed_sig_2[2])).buildTransaction(transaction)
    print("Sign... ")
    signed = w3.eth.account.signTransaction(contract_tx, private_key)

    print("Broadcasting tx...")
    tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)
    print("txid {}".format(to_hex(tx_hash)))
    try:
        #time.sleep(10)
        #tx_receipt = w3.eth.getTransactionReceipt(tx_hash)
        tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)
    except Exception as e:
        print("Exception. Probably timeout error")
        sys.exit(1)        
        
    if tx_receipt:
        print("Got receipt. Gas used {}".format(tx_receipt['cumulativeGasUsed']))
        print("Was transaction successful? -- {}".format(tx_receipt['status']))
    else:
        print("Sending failed")
        sys.exit(1)


if __name__ == '__main__':
    if (len(sys.argv) < 5):
        sys.exit("USAGE: spend_ethereum_multisig KEYSTORE CONTRACT_ADDRESS DESTINATION_ADDRESS AMOUNT(ETH) SIGNATURE_1 SIGNATURE_2")
    main(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5], sys.argv[6])
